{"version":3,"sources":["webpack://Formula/webpack/universalModuleDefinition","webpack://Formula/./src/fparser.js","webpack://Formula/webpack/bootstrap","webpack://Formula/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","MATH_CONSTANTS","PI","Math","E","LN2","LN10","LOG2E","LOG10E","SQRT1_2","SQRT2","Formula","fStr","options","formulaExpression","Object","assign","memoization","_variables","_memory","setFormula","formulaString","formulaStr","parse","toSplit","pCount","paramStr","params","split","chr","push","Error","length","s","replace","keys","forEach","c","RegExp","str","cleanupInputString","_do_parse","lastChar","act","state","expressions","char","tmp","funcName","charAt","match","isOperator","isOperatorExpr","Expression","createOperatorExpression","ValueExpression","VariableExpression","registerVariable","BracketExpression","args","splitFunctionParams","map","a","FunctionExpression","buildExpressionTree","exprCopy","idx","expr","PowerExpression","base","exponent","splice","MultDivExpression","left","right","PlusMinusExpression","varName","indexOf","valueObj","Array","v","evaluate","getExpression","res","resultFromMemory","storeInMemory","JSON","stringify","key","hashValues","undefined","value","toString","formula","operator","innerExpression","Number","isNaN","String","includes","pow","fn","argumentExpressions","formulaObject","paramValues","Function","apply","join","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"fparser.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Formula\"] = factory();\n\telse\n\t\troot[\"Formula\"] = factory();\n})(this, function() {\nreturn ","/**\n * JS Formula Parser\n * -------------------\n * (c) 2012-2021 Alexander Schenkel, alex@alexi.ch\n *\n * JS Formula Parser takes a string, parses its mathmatical formula\n * and creates an evaluatable Formula object of it.\n *\n * Example input:\n *\n * var fObj = new Formula('sin(PI*x)/(2*PI)');\n * var result = fObj.evaluate({x: 2});\n * var results = fObj.evaluate([\n *     {x: 2},\n *     {x: 4},\n *     {x: 8}\n * ]);\n *\n * LICENSE:\n * -------------\n * MIT license, see LICENSE file\n */\nconst MATH_CONSTANTS = {\n    PI: Math.PI,\n    E: Math.E,\n    LN2: Math.LN2,\n    LN10: Math.LN10,\n    LOG2E: Math.LOG2E,\n    LOG10E: Math.LOG10E,\n    SQRT1_2: Math.SQRT1_2,\n    SQRT2: Math.SQRT2\n};\nexport default class Formula {\n    /**\n     * Creates a new Formula instance\n     *\n     * Optional configuration can be set in the options object:\n     *\n     * - memoization (bool): If true, results are stored and re-used when evaluate() is called with the same parameters\n     *\n     * @param {String} fStr The formula string, e.g. 'sin(x)/cos(y)'\n     * @param {Object} options An options object. Supported options:\n     *    - memoization (bool): If true, results are stored and re-used when evaluate() is called with the same parameters\n     * @param {Formula} parentFormula Internally used to build a Formula AST\n     */\n    constructor(fStr, options = {}) {\n        this.formulaExpression = null;\n        this.options = Object.assign(\n            {\n                memoization: false\n            },\n            options\n        );\n        this._variables = [];\n        this._memory = {};\n        this.setFormula(fStr);\n        return this;\n    }\n\n    /**\n     * Re-sets the given String and parses it to a formula expression. Can be used after initialization,\n     * to re-use the Formula object.\n     *\n     * @param {String} formulaString The formula string to set/parse\n     * @return {this} The Formula object (this)\n     */\n    setFormula(formulaString) {\n        if (formulaString) {\n            this.formulaExpression = null;\n            this._variables = [];\n            this._memory = {};\n            this.formulaStr = formulaString;\n            this.formulaExpression = this.parse(formulaString);\n        }\n        return this;\n    }\n\n    /**\n     * Enable memoization: An expression is only evaluated once for the same input.\n     * Further evaluations with the same input will return the in-memory stored result.\n     */\n    enableMemoization() {\n        this.options.memoization = true;\n    }\n\n    /**\n     * Disable in-memory memoization: each call to evaluate() is executed from scratch.\n     */\n    disableMemoization() {\n        this.options.memoization = false;\n        this._memory = {};\n    }\n\n    /**\n     * Splits the given string by ',', makes sure the ',' is not within\n     * a sub-expression\n     * e.g.: str = \"x,pow(3,4)\" returns 2 elements: x and pow(3,4).\n     */\n    splitFunctionParams(toSplit) {\n        // do not split on ',' within matching brackets.\n        let pCount = 0,\n            paramStr = '';\n        const params = [];\n        for (let chr of toSplit.split('')) {\n            if (chr === ',' && pCount === 0) {\n                // Found function param, save 'em\n                params.push(paramStr);\n                paramStr = '';\n            } else if (chr === '(') {\n                pCount++;\n                paramStr += chr;\n            } else if (chr === ')') {\n                pCount--;\n                paramStr += chr;\n                if (pCount < 0) {\n                    throw new Error('ERROR: Too many closing parentheses!');\n                }\n            } else {\n                paramStr += chr;\n            }\n        }\n        if (pCount !== 0) {\n            throw new Error('ERROR: Too many opening parentheses!');\n        }\n        if (paramStr.length > 0) {\n            params.push(paramStr);\n        }\n        return params;\n    }\n\n    /**\n     * Cleans the input string from unnecessary whitespace,\n     * and replaces some known constants:\n     */\n    cleanupInputString(s) {\n        s = s.replace(/[\\s]+/g, '');\n        // surround known math constants with [], to parse them as named variables [xxx]:\n        Object.keys(MATH_CONSTANTS).forEach((c) => {\n            s = s.replace(new RegExp(`\\\\b${c}\\\\b`, 'g'), `[${c}]`);\n        });\n        return s;\n    }\n\n    /**\n     * Parses the given formula string by using a state machine into a single Expression object,\n     * which represents an expression tree (aka AST).\n     *\n     * First, we split the string into 'expression': An expression can be:\n     *   - a number, e.g. '3.45'\n     *   - an unknown variable, e.g. 'x'\n     *   - a single char operator, such as '*','+' etc...\n     *   - a named variable, in [], e.g. [myvar]\n     *   - a function, such as sin(x)\n     *   - a parenthessed expression, containing other expressions\n     *\n     * We want to create an expression tree out of the string. This is done in 2 stages:\n     * 1. form single expressions from the string: parse the string into known expression objects:\n     *   - numbers/variables\n     *   - operators\n     *   - braces (with a sub-expression)\n     *   - functions (with sub-expressions (aka argument expressions))\n     *   This will lead to an array of expressions.\n     *  As an example:\n     *  \"2 + 3 * (4 + 3 ^ 5) * sin(PI * x)\" forms an array of the following expressions:\n     *  `[2, +, 3, *, bracketExpr(4,+,3,^,5), * , functionExpr(PI,*,x)]`\n     * 2. From the raw expression array we form an expression tree by evaluating the expressions in the correct order:\n     *    e.g.:\n     *  the expression array `[2, +, 3, *, bracketExpr(4,+,3,^,5), * , functionExpr(PI,*,x)]` will be transformed into the expression tree:\n     *  ```\n     *         root expr:  (+)\n     *                     / \\\n     *                    2    (*)\n     *                        / \\\n     *                     (*)  functionExpr(...)\n     *                     / \\\n     *                    3   (bracket(..))\n     * ```\n     *\n     * In the end, we have a single root expression node, which then can be evaluated in the evaluate() function.\n     *\n     * @param {String} str The formula string, e.g. '3*sin(PI/x)'\n     * @returns {Expression} An expression object, representing the expression tree\n     */\n    parse(str) {\n        // clean the input string first. spaces, math constant replacements etc.:\n        str = this.cleanupInputString(str);\n        // start recursive call to parse:\n        return this._do_parse(str);\n    }\n\n    /**\n     * @see parse(): this is the recursive parse function, without the clean string part.\n     * @param {String} str\n     * @returns {Expression} An expression object, representing the expression tree\n     */\n    _do_parse(str) {\n        let lastChar = str.length - 1,\n            act = 0,\n            state = 0,\n            expressions = [],\n            char = '',\n            tmp = '',\n            funcName = null,\n            pCount = 0;\n\n        while (act <= lastChar) {\n            switch (state) {\n                case 0:\n                    // None state, the beginning. Read a char and see what happens.\n                    char = str.charAt(act);\n                    if (char.match(/[0-9.]/)) {\n                        // found the beginning of a number, change state to \"within-number\"\n                        state = 'within-nr';\n                        tmp = '';\n                        act--;\n                    } else if (this.isOperator(char)) {\n                        // Simple operators. Note: '-' must be treaten specially,\n                        // it could be part of a number.\n                        // it MUST be part of a number if the last found expression\n                        // was an operator (or the beginning):\n                        if (char === '-') {\n                            if (expressions.length === 0 || this.isOperatorExpr(expressions[expressions.length - 1])) {\n                                state = 'within-nr';\n                                tmp = '-';\n                                break;\n                            }\n                        }\n\n                        // Found a simple operator, store as expression:\n                        if (act === lastChar || this.isOperatorExpr(expressions[act - 1])) {\n                            state = -1; // invalid to end with an operator, or have 2 operators in conjunction\n                            break;\n                        } else {\n                            expressions.push(Expression.createOperatorExpression(char));\n                            state = 0;\n                        }\n                    } else if (char === '(') {\n                        // left parenthes found, seems to be the beginning of a new sub-expression:\n                        state = 'within-parentheses';\n                        tmp = '';\n                        pCount = 0;\n                    } else if (char === '[') {\n                        // left named var separator char found, seems to be the beginning of a named var:\n                        state = 'within-named-var';\n                        tmp = '';\n                    } else if (char.match(/[a-zA-Z]/)) {\n                        // multiple chars means it may be a function, else its a var which counts as own expression:\n                        if (act < lastChar && str.charAt(act + 1).match(/[a-zA-Z0-9_]/)) {\n                            tmp = char;\n                            state = 'within-func';\n                        } else {\n                            // Single variable found:\n                            // We need to check some special considerations:\n                            // - If the last char was a number (e.g. 3x), we need to create a multiplication out of it (3*x)\n                            if (\n                                expressions.length > 0 &&\n                                expressions[expressions.length - 1] instanceof ValueExpression\n                            ) {\n                                expressions.push(Expression.createOperatorExpression('*'));\n                            }\n                            expressions.push(new VariableExpression(char));\n                            this.registerVariable(char);\n                            state = 0;\n                            tmp = '';\n                        }\n                    }\n                    break;\n                case 'within-nr':\n                    char = str.charAt(act);\n                    if (char.match(/[0-9.]/)) {\n                        //Still within number, store and continue\n                        tmp += char;\n                        if (act === lastChar) {\n                            expressions.push(new ValueExpression(tmp));\n                            state = 0;\n                        }\n                    } else {\n                        // Number finished on last round, so add as expression:\n                        if (tmp === '-') {\n                            // just a single '-' means: a variable could follow (e.g. like in 3*-x), we convert it to -1: (3*-1x)\n                            tmp = -1;\n                        }\n                        expressions.push(new ValueExpression(tmp));\n                        tmp = '';\n                        state = 0;\n                        act--;\n                    }\n                    break;\n\n                case 'within-func':\n                    char = str.charAt(act);\n                    if (char.match(/[a-zA-Z0-9_]/)) {\n                        tmp += char;\n                    } else if (char === '(') {\n                        funcName = tmp;\n                        tmp = '';\n                        pCount = 0;\n                        state = 'within-func-parentheses';\n                    } else {\n                        throw new Error('Wrong character for function at position ' + act);\n                    }\n\n                    break;\n\n                case 'within-named-var':\n                    char = str.charAt(act);\n                    if (char === ']') {\n                        // end of named var, create expression:\n                        expressions.push(new VariableExpression(tmp));\n                        this.registerVariable(tmp);\n                        tmp = '';\n                        state = 0;\n                    } else if (char.match(/[a-zA-Z0-9_]/)) {\n                        tmp += char;\n                    } else {\n                        throw new Error('Character not allowed within named variable: ' + char);\n                    }\n                    break;\n\n                case 'within-parentheses':\n                case 'within-func-parentheses':\n                    char = str.charAt(act);\n                    if (char === ')') {\n                        //Check if this is the matching closing parenthesis.If not, just read ahead.\n                        if (pCount <= 0) {\n                            // Yes, we found the closing parenthesis, create new sub-expression:\n                            if (state === 'within-parentheses') {\n                                expressions.push(new BracketExpression(this._do_parse(tmp)));\n                            } else if (state === 'within-func-parentheses') {\n                                // Function found: create expressions from the inner argument\n                                // string, and create a function expression with it:\n                                let args = this.splitFunctionParams(tmp).map((a) => this._do_parse(a));\n                                expressions.push(new FunctionExpression(funcName, args, this));\n                                funcName = null;\n                            }\n                            state = 0;\n                        } else {\n                            pCount--;\n                            tmp += char;\n                        }\n                    } else if (char === '(') {\n                        // begin of a new sub-parenthesis, increase counter:\n                        pCount++;\n                        tmp += char;\n                    } else {\n                        // all other things are just added to the sub-expression:\n                        tmp += char;\n                    }\n                    break;\n            }\n            act++;\n        }\n\n        if (state !== 0) {\n            throw new Error('Could not parse formula: Syntax error.');\n        }\n\n        return this.buildExpressionTree(expressions);\n    }\n\n    /**\n     * @see parse(): Builds an expression tree from the given expression array.\n     * Builds a tree with a single root expression in the correct order of operator precedence.\n     *\n     * Note that the given expression objects are modified and linked.\n     *\n     * @param {*} expressions\n     * @return {Expression} The root Expression of the built expression tree\n     */\n    buildExpressionTree(expressions) {\n        if (expressions.length < 1) {\n            return null;\n        }\n        const exprCopy = [...expressions];\n        let idx = 0;\n        let expr = null;\n        // Replace all Power expressions with a partial tree:\n        while (idx < exprCopy.length) {\n            expr = exprCopy[idx];\n            if (expr instanceof PowerExpression) {\n                if (idx === 0 || idx === exprCopy.length - 1) {\n                    throw new Error('Wrong operator position!');\n                }\n                expr.base = exprCopy[idx - 1];\n                expr.exponent = exprCopy[idx + 1];\n                exprCopy[idx - 1] = expr;\n                exprCopy.splice(idx, 2);\n            } else {\n                idx++;\n            }\n        }\n\n        // Replace all Mult/Div expressions with a partial tree:\n        idx = 0;\n        expr = null;\n        while (idx < exprCopy.length) {\n            expr = exprCopy[idx];\n            if (expr instanceof MultDivExpression) {\n                if (idx === 0 || idx === exprCopy.length - 1) {\n                    throw new Error('Wrong operator position!');\n                }\n                expr.left = exprCopy[idx - 1];\n                expr.right = exprCopy[idx + 1];\n                exprCopy[idx - 1] = expr;\n                exprCopy.splice(idx, 2);\n            } else {\n                idx++;\n            }\n        }\n\n        // Replace all Plus/Minus expressions with a partial tree:\n        idx = 0;\n        expr = null;\n        while (idx < exprCopy.length) {\n            expr = exprCopy[idx];\n            if (expr instanceof PlusMinusExpression) {\n                if (idx === 0 || idx === exprCopy.length - 1) {\n                    throw new Error('Wrong operator position!');\n                }\n                expr.left = exprCopy[idx - 1];\n                expr.right = exprCopy[idx + 1];\n                exprCopy[idx - 1] = expr;\n                exprCopy.splice(idx, 2);\n            } else {\n                idx++;\n            }\n        }\n        if (exprCopy.length !== 1) {\n            throw new Error('Could not parse formula: incorrect syntax?');\n        }\n        return exprCopy[0];\n    }\n\n    isOperator(char) {\n        return typeof char === 'string' && char.match(/[\\+\\-\\*\\/\\^]/);\n    }\n\n    isOperatorExpr(expr) {\n        return (\n            expr instanceof PlusMinusExpression || expr instanceof MultDivExpression || expr instanceof PowerExpression\n        );\n    }\n\n    registerVariable(varName) {\n        if (this._variables.indexOf(varName) < 0) {\n            this._variables.push(varName);\n        }\n    }\n\n    getVariables() {\n        return this._variables;\n    }\n\n    /**\n     * Evaluates a Formula by delivering values for the Formula's variables.\n     * E.g. if the formula is '3*x^2 + 2*x + 4', you should call `evaulate` as follows:\n     *\n     * evaluate({x:2}) --> Result: 20\n     *\n     * @param {Object|Array} valueObj An object containing values for variables and (unknown) functions,\n     *   or an array of such objects: If an array is given, all objects are evaluated and the results\n     *   also returned as array.\n     * @return {Number|Array} The evaluated result, or an array with results\n     */\n    evaluate(valueObj) {\n        // resolve multiple value objects recursively:\n        if (valueObj instanceof Array) {\n            return valueObj.map((v) => this.evaluate(v));\n        }\n        let expr = this.getExpression();\n        if (!(expr instanceof Expression)) {\n            throw new Error('No expression set: Did you init the object with a Formula?');\n        }\n        if (this.options.memoization) {\n            let res = this.resultFromMemory(valueObj);\n            if (res !== null) {\n                return res;\n            } else {\n                res = expr.evaluate({ ...MATH_CONSTANTS, ...valueObj });\n                this.storeInMemory(valueObj, res);\n                return res;\n            }\n        }\n        return expr.evaluate({ ...MATH_CONSTANTS, ...valueObj });\n    }\n\n    hashValues(valueObj) {\n        return JSON.stringify(valueObj);\n    }\n\n    resultFromMemory(valueObj) {\n        let key = this.hashValues(valueObj);\n        let res = this._memory[key];\n        if (res !== undefined) {\n            return res;\n        } else {\n            return null;\n        }\n    }\n\n    storeInMemory(valueObj, value) {\n        this._memory[this.hashValues(valueObj)] = value;\n    }\n\n    getExpression() {\n        return this.formulaExpression;\n    }\n\n    getExpressionString() {\n        return this.formulaExpression ? this.formulaExpression.toString() : '';\n    }\n\n    static calc(formula, valueObj, options = {}) {\n        valueObj = valueObj || {};\n        return new Formula(formula, options).evaluate(valueObj);\n    }\n}\n\nclass Expression {\n    static createOperatorExpression(operator, left = null, right = null) {\n        if (operator === '^') {\n            return new PowerExpression(operator, left, right);\n        }\n        if (operator === '*' || operator === '/') {\n            return new MultDivExpression(operator, left, right);\n        }\n        if (operator === '+' || operator === '-') {\n            return new PlusMinusExpression(operator, left, right);\n        }\n        throw new Error(`Unknown operator: ${operator}`);\n    }\n\n    evaluate(params = {}) {\n        throw new Error('Must be defined in child classes');\n    }\n\n    toString() {\n        return '';\n    }\n}\n\nclass BracketExpression extends Expression {\n    constructor(expr) {\n        super();\n        this.innerExpression = expr;\n        if (!(this.innerExpression instanceof Expression)) {\n            throw new Error('No inner expression given for bracket expression');\n        }\n    }\n    evaluate(params = {}) {\n        return this.innerExpression.evaluate(params);\n    }\n    toString() {\n        return `(${this.innerExpression.toString()})`;\n    }\n}\n\nclass ValueExpression extends Expression {\n    constructor(value) {\n        super();\n        this.value = Number(value);\n        if (isNaN(this.value)) {\n            throw new Error('Cannot parse number: ' + value);\n        }\n    }\n    evaluate(params = {}) {\n        return this.value;\n    }\n    toString() {\n        return String(this.value);\n    }\n}\n\nclass PlusMinusExpression extends Expression {\n    constructor(operator, left = null, right = null) {\n        super();\n        if (!['+', '-'].includes(operator)) {\n            throw new Error(`Operator not allowed in Plus/Minus expression: ${operator}`);\n        }\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n\n    evaluate(params = {}) {\n        if (this.operator === '+') {\n            return this.left.evaluate(params) + this.right.evaluate(params);\n        }\n        if (this.operator === '-') {\n            return this.left.evaluate(params) - this.right.evaluate(params);\n        }\n        throw new Error('Unknown operator for PlusMinus expression');\n    }\n\n    toString() {\n        return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;\n    }\n}\n\nclass MultDivExpression extends Expression {\n    constructor(operator, left = null, right = null) {\n        super();\n        if (!['*', '/'].includes(operator)) {\n            throw new Error(`Operator not allowed in Multiply/Division expression: ${operator}`);\n        }\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n\n    evaluate(params = {}) {\n        if (this.operator === '*') {\n            return this.left.evaluate(params) * this.right.evaluate(params);\n        }\n        if (this.operator === '/') {\n            return this.left.evaluate(params) / this.right.evaluate(params);\n        }\n        throw new Error('Unknown operator for MultDiv expression');\n    }\n\n    toString() {\n        return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;\n    }\n}\n\nclass PowerExpression extends Expression {\n    constructor(base = null, exponent = null) {\n        super();\n        this.base = base;\n        this.exponent = exponent;\n    }\n\n    evaluate(params = {}) {\n        return Math.pow(this.base.evaluate(params), this.exponent.evaluate(params));\n    }\n\n    toString() {\n        return `${this.base.toString()}^${this.exponent.toString()}`;\n    }\n}\nclass FunctionExpression extends Expression {\n    constructor(fn, argumentExpressions, formulaObject = null) {\n        super();\n        this.fn = fn;\n        this.argumentExpressions = argumentExpressions || [];\n        this.formulaObject = formulaObject;\n    }\n\n    evaluate(params = {}) {\n        params = params || {};\n        const paramValues = this.argumentExpressions.map((a) => a.evaluate(params));\n\n        // If the params object itself has a function definition with\n        // the function name, call this one:\n        if (params[this.fn] instanceof Function) {\n            return params[this.fn].apply(this, paramValues);\n        }\n        // perhaps the Formula object has the function? so call it:\n        else if (this.formulaObject && this.formulaObject[this.fn] instanceof Function) {\n            return this.formulaObject[this.fn].apply(this.formulaObject, paramValues);\n        }\n        // Has the JS Math object a function as requested? Call it:\n        else if (Math[this.fn] instanceof Function) {\n            return Math[this.fn].apply(this, paramValues);\n        }\n        // No more options left: sorry!\n        else {\n            throw new Error('Function not found: ' + this.fn);\n        }\n    }\n\n    toString() {\n        return `${this.fn}(${this.argumentExpressions.map((a) => a.toString()).join(', ')})`;\n    }\n}\n\nclass VariableExpression extends Expression {\n    constructor(varName) {\n        super();\n        this.varName = varName || '';\n    }\n\n    evaluate(params = {}) {\n        // params contain variable / value pairs: If this object's variable matches\n        // a varname found in the params, return the value.\n        // eg: params = {x: 5,y:3}, varname = x, return 5\n        if (params[this.varName] !== undefined) {\n            return Number(params[this.varName]);\n        } else {\n            throw new Error('Cannot evaluate ' + this.varName + ': No value given');\n        }\n    }\n    toString() {\n        return `${this.varName}`;\n    }\n}\n\nFormula.Expression = Expression;\nFormula.BracketExpression = BracketExpression;\nFormula.PowerExpression = PowerExpression;\nFormula.MultDivExpression = MultDivExpression;\nFormula.PlusMinusExpression = PlusMinusExpression;\nFormula.ValueExpression = ValueExpression;\nFormula.VariableExpression = VariableExpression;\nFormula.FunctionExpression = FunctionExpression;\nFormula.MATH_CONSTANTS = MATH_CONSTANTS;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(91);\n"],"sourceRoot":""}